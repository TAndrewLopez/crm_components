// PRISMA SETUP
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum tattooColor {
  black_and_grey @map("black and grey")
  color
}

// EXTRA SMALL 1x1
// SMALL 2x2
// MEDIUM 3x3
// LARGE 6x6
// XLARGE 8x8+

enum tattooSize {
  xsmall
  small
  medium
  large
  xlarge
}

enum submissionStatus {
  new
  read
  current
  pending
  urgent
  closed
}

enum appointmentStatus {
  accepted
  rejected
}

enum appointmentType {
  consultation
  appointment
  custom
}

enum role {
  client
  admin
  owner
  dev
}

enum depositStatus {
  paid
  unpaid
}

// SUBMISSION MODELS
model submission {
  id                 Int              @id @default(autoincrement())
  user_id            Int?
  status             submissionStatus @default(new)
  name               String           @db.VarChar(255)
  email              String           @db.VarChar(255)
  phone_number       String           @db.VarChar(255)
  preferred_pronouns String?          @db.VarChar(255)
  color              tattooColor
  size               tattooSize
  placement          String           @db.VarChar(255)
  description        String

  appointment_status    appointmentStatus?
  requires_consultation Boolean?
  required_sessions     Int?
  rejection_reason      String?
  other_reason          String?
  referral              String?

  // RELATIONS
  bookmarks        bookmark[]
  notes            submissionNote[]
  appointmentDates calendarEvent[]
  user             user?            @relation(fields: [user_id], references: [id])
  // TIMESTAMPS
  created_at       DateTime         @default(now())
  updated_at       DateTime?        @updatedAt
}

model submissionNote {
  id            Int    @id @default(autoincrement())
  text          String
  submission_id Int?
  user_id       Int?

  // RELATIONS
  submission submission? @relation(fields: [submission_id], references: [id])
  user       user?       @relation(fields: [user_id], references: [id])
  // TIMESTAMPS
  created_at DateTime    @default(now())
  updated_at DateTime?   @updatedAt
}

model calendarEvent {
  id           Int             @id @default(autoincrement())
  type         appointmentType
  title        String
  date         DateTime?
  description  String
  label        String
  userId       Int?
  submissionId Int?

  // RELATIONS
  user       user?       @relation(fields: [userId], references: [id])
  submission submission? @relation(fields: [submissionId], references: [id])
  // TIMESTAMPS
  created_at DateTime    @default(now())
  updated_at DateTime?   @updatedAt
}

// USER MODELS
model user {
  id                 Int     @id @default(autoincrement())
  first_name         String  @db.VarChar(255)
  last_name          String  @db.VarChar(255)
  username           String  @db.VarChar(255)
  email              String  @db.VarChar(255)
  role               role    @default(client)
  phone_number       String  @db.VarChar(255)
  image_url          String?
  birthday           String?
  profile_settings   String? @db.VarChar(255)
  preferred_pronouns String?

  // RELATIONS
  client_history  submission[]
  bookmarks       bookmark[]
  submissionNotes submissionNote[]
  appointments    calendarEvent[]
  owner_deposits  deposit[]        @relation("owner")
  client_deposits deposit[]        @relation("client")
  // TIMESTAMPS
  created_at      DateTime         @default(now())
  updated_at      DateTime?        @updatedAt
}

// FOR ADMINS & OWNERS & DEVS
model bookmark {
  id            Int              @id @default(autoincrement())
  owner_id      Int
  submission_id Int
  label         String
  status        submissionStatus @map("status")

  // RELATIONS
  submission submission @relation(fields: [submission_id], references: [id])
  owner      user       @relation(fields: [owner_id], references: [id])
  // TIMESTAMPS
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}

// PAYMENT MODELS
model deposit {
  id         Int           @id @default(autoincrement())
  paid_to_id Int
  email      String        @db.VarChar(255)
  amount     Int
  status     depositStatus @default(unpaid)
  client_id  Int?

  // RELATIONS
  client     user?     @relation("client", fields: [client_id], references: [id])
  owner      user      @relation("owner", fields: [paid_to_id], references: [id])
  // TIMESTAMPS
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

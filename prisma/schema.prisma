// PRISMA SETUP
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum tattooColor {
  black_and_grey @map("black and grey")
  color
}

enum submissionStatus {
  new
  read
  current
  pending
  urgent
  closed
}

enum role {
  client
  admin
  owner
  dev
}

enum depositStatus {
  paid
  unpaid
}

// SUBMISSION MODELS
model submission {
  id                 Int     @id @default(autoincrement())
  name               String  @db.VarChar(255)
  email              String  @db.VarChar(255)
  phone_number       String  @db.VarChar(255)
  preferred_pronouns String? @db.VarChar(255)
  description        String
  size               String  @db.VarChar(255)
  placement          String  @db.VarChar(255)
  author_id          Int?

  // ENUMS
  color      tattooColor
  status     submissionStatus @default(new)
  // RELATIONS
  favorite   favorite[]
  author     user?            @relation(fields: [author_id], references: [id])
  // TIMESTAMPS
  created_at DateTime         @default(now())
  updated_at DateTime?        @updatedAt
}

// PAYMENT MODELS
model deposit {
  id        Int    @id @default(autoincrement())
  amount    Int
  email     String @db.VarChar(255)
  client_id Int?
  owner_id  Int

  // ENUMS
  status     depositStatus @default(unpaid)
  // RELATIONS
  client     user?         @relation("client", fields: [client_id], references: [id])
  owner      user          @relation("owner", fields: [owner_id], references: [id])
  // TIMESTAMPS
  created_at DateTime      @default(now())
  updated_at DateTime?     @updatedAt
}

// USER MODELS
model user {
  id           Int    @id @default(autoincrement())
  username     String @db.VarChar(255)
  email        String @db.VarChar(255)
  phone_number String @db.VarChar(255)
  // image_url    String?

  // ENUMS
  role            role         @default(client)
  // RELATIONS
  client_history  submission[]
  favorites       favorite[]
  owner_deposits  deposit[]    @relation("owner")
  client_deposits deposit[]    @relation("client")
  // TIMESTAMPS
  created_at      DateTime     @default(now())
  updated_at      DateTime?    @updatedAt
}

// USER MODEL -> FOR ADMINS & OWNERS & DEVS
model favorite {
  id            Int              @id @default(autoincrement())
  label         String
  status        submissionStatus @map("status")
  user_id       Int
  submission_id Int

  // RELATIONS
  submission submission @relation(fields: [submission_id], references: [id])
  owner      user       @relation(fields: [user_id], references: [id])
  // TIMESTAMPS
  created_at DateTime   @default(now())
  updated_at DateTime?  @updatedAt
}
